#@START_HEADER
# TOP LEVEL MAKEFILE - v0.2
#
# Not ready to be used as Makefile, this is a template, that is used by config.sh
# to write the final Makefile. If you haven't already, run the config.sh script!
#
#
# 2024 Diogo Gomes

#@END_HEADER

# config.sh will put some stuff here for us

ifneq ($(MADE_CONFIG),true)
$(error We're not properly configured, run ./configure!!)
endif

override SHELL:=/bin/bash
include $(ROOTSRCDIR)/config/config.mk
include $(ROOTSRCDIR)/config/output.mk

include progs.mk

# Subdirectories
#FIXME Get this info from the script, no reason to have it ourselves
SUBDIRS:=bootloader kernel init lib32 lib64
MOUNTDIR:=mount

CLEANSUBDIRS:=$(SUBDIRS:%=clean-%)

.PHONY: all clean
.PHONY: $(SUBDIRS)

all: $(SUBDIRS)

kernel: lib64
init: lib32
bootloader: lib32

$(SUBDIRS):
	@$(MAKE) -C $@

#@START_DISKIMAGE
.PHONY: diskimage qemu qemu-debug do_mount_dir

diskimage: all $(MOUNTDIR)/kernel.bin $(MOUNTDIR)/init.bin do_mount_dir
	@printf "Injecting $(CYAN)stage0.bin$(NC) in diskimage...\n"
	@dd if=bootloader/stage0.bin of=$(DISKIMAGE) conv=notrunc bs=440 count=1
	@printf "Injecting $(CYAN)stage1.bin$(NC) in diskimage...\n"
	@dd if=bootloader/stage1.bin of=$(DISKIMAGE) conv=notrunc bs=512 seek=1 count=$(shell ls -l bootloader/stage1.bin | awk 'function ceil(x,y){y=int(x); return(x>y?y+1:y)} {print ceil($$5/512)}')
	@sync
#	@dd if=bootloader/stage0.bin of=$(DISKIMAGE) conv=notrunc bs=512 seek=1 count=1
#	dd if  blah blah inject stage0
#	Inject stage1

# Attempt to mount directory
do_mount_dir: $(MOUNTDIR)
	@printf "Check if we need to mount: "
	@sudo -A ${ROOTSRCDIR}/tools/build-scripts/mountdirs.sh $(MOUNTDIR) $(LOOPBACK) $(DISKIMAGE) $(shell whoami)

$(MOUNTDIR):
	@mkdir -p $(MOUNTDIR)

$(MOUNTDIR)/kernel.bin: all do_mount_dir
	@printf "Copying $(CYAN)kernel.bin$(NC) to mountdir...\n"
	@cp kernel/kernel.bin $(MOUNTDIR)/kernel.bin
	@sync

$(MOUNTDIR)/init.bin: all do_mount_dir
	@printf "Copying $(CYAN)init.bin$(NC) to mountdir...\n"
	@cp init/init.bin $(MOUNTDIR)/init.bin
	@sync

qemu: diskimage
	@printf "Starting qemu using the diskimage...\n"
	@qemu-system-x86_64 -drive file=$(DISKIMAGE),format=raw -d int,cpu_reset -no-reboot -no-shutdown

qemu-debug: diskimage
	@printf "Starting qemu with debug enabled using the diskimage...\n"
	@qemu-system-x86_64 -drive file=$(DISKIMAGE),format=raw -d int,cpu_reset -no-reboot -no-shutdown -s -S

#@END_DISKIMAGE

#@START_GRUB
.PHONY: iso qemu-grub qemu-grub-debug

iso: all
	@printf "Creating $(CYAN)PatroclusOS.iso$(NC) using grub...\n"
	@cp kernel/kernel.bin isodir/boot/kernel.bin
	@cp init/init.bin isodir/boot/init.bin
	@cp ${ROOTSRCDIR}/config/grub.cfg isodir/boot/grub/grub.cfg
	@$(GRUB_PROG) -o PatroclusOS.iso isodir/

qemu-grub: iso
	@printf "Starting qemu using the iso...\n"
	@qemu-system-x86_64 -cdrom PatroclusOS.iso -d int,cpu_reset -no-reboot -no-shutdown

qemu-grub-debug: iso
	@printf "Starting qemu with debug enabled using the iso...\n"
	@$(ROOTSRCDIR)/tools/build-scripts/qemu-grub-debug.sh PatroclusOS.iso

#@END_GRUB

clean: $(CLEANSUBDIRS)
	-@rm -f $(shell find . -name '*.bin')
	-@rm -f $(shell find . -name '*.o')
	-@rm -f $(shell find . -name '*.d')
	@printf "$(GREEN)Clean done!\n"

$(CLEANSUBDIRS):
	@$(MAKE) -C $(@:clean-%=%) clean

#TODO add distclean

#@START_DOCS
.PHONY: docs

docs:
	@printf "Building documentation...\n"
	@doxygen Doxyfile

#@END_DOCS